AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'

Description:
  Defines the resources for the Leaphy Robocoder Websockets API

# TODO
# - Add compile target S3 bucket
# - Define function names for lambdas
# - Configure response integration for Compile proxy lambda

Parameters:
  EnvironmentParameter:
    Type: String
    Default: test
    AllowedValues:
      - test
      - prod
    Description: Enter the environment this template should be deployed to. Default is test
  CompileLayerParameter:
    Type: String
    Default: arn:aws:lambda:eu-west-1:728909196542:layer:leaphy-compile-lambda-runtime:3
    Description: Enter the layer used as custom runtime for the Compile lambda

Resources:
  WebsocketsAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${EnvironmentParameter}-robocoder-ws-api"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
      ApiKeySelectionExpression: $request.header.x-api-key

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ["lambda.amazonaws.com" ]
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: AllowAllForWebsocketRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action: xray:*
                Resource: "*"
              - Effect: Allow
                Action: dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action: 'execute-api:ManageConnections'
                Resource: 'arn:aws:execute-api:*:*:*/@connections/*'
              - Effect: Allow
                Action: apigateway:*
                Resource: "arn:aws:apigateway:eu-west-1::*"
                
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute

  ConnectLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaRole.Arn
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient();
          function addConnectionId(connectionId) {
              return ddb.put({
          		TableName: '${ConnectionsTable}',
                  Item: {
          			ConnectionId : connectionId
          		},
          	}).promise();
          }
          exports.handler = (event, context, callback) => {
              const connectionId = event.requestContext.connectionId;
              addConnectionId(connectionId).then(() => {
              callback(null, {
          		statusCode: 200,
                  })
          	});
          }
      Description: Invoked when an WS upgrade request succeeds

  ConnectRouteIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref WebsocketsAPI
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectLambda.Arn}/invocations"

  ConnectRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    DependsOn:
      - ConnectRouteIntegration
    Properties:
      ApiId: !Ref WebsocketsAPI
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub "integrations/${ConnectRouteIntegration}"

  ConnectLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketsAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectLambda
      Principal: apigateway.amazonaws.com


  PairClientLambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaRole.Arn
      Handler: pair-client.handler
      CodeUri: lambda/pair-client/
      Description: Pair a client to a registered robot
      Environment:
        Variables: 
          CONNECTIONS_TABLE : !Ref ConnectionsTable
          CONNECTION_URL : !Sub "https://${WebsocketsAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter}"

  PairClientRouteIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref WebsocketsAPI
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PairClientLambda.Arn}/invocations"

  PairClientRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    DependsOn:
      - PairClientRouteIntegration
    Properties:
      ApiId: !Ref WebsocketsAPI
      RouteKey: pair-client
      AuthorizationType: NONE
      Target: !Sub "integrations/${PairClientRouteIntegration}"

  PairClientLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketsAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PairClientLambda
      Principal: apigateway.amazonaws.com


  RegisterRobotLambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaRole.Arn
      Handler: register-robot.handler
      CodeUri: lambda/register-robot/
      Description: Register a robot connection to the WS API
      Environment:
        Variables: 
          CONNECTIONS_TABLE : !Ref ConnectionsTable
          CONNECTION_URL : !Sub "https://${WebsocketsAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter}"

  RegisterRobotRouteIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref WebsocketsAPI
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterRobotLambda.Arn}/invocations"

  RegisterRobotRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    DependsOn:
      - RegisterRobotRouteIntegration
    Properties:
      ApiId: !Ref WebsocketsAPI
      RouteKey: register-robot
      AuthorizationType: NONE
      Target: !Sub "integrations/${RegisterRobotRouteIntegration}"

  RegisterRobotLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketsAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RegisterRobotLambda
      Principal: apigateway.amazonaws.com


  CompileProxyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaRole.Arn
      Handler: compile-proxy.handler
      CodeUri: lambda/compile-proxy/
      Description: Triggers a compilation by invoking the compile lambda
      Environment:
        Variables: 
          CONNECTIONS_TABLE : !Ref ConnectionsTable
          COMPILE_LAMBDA: !Ref CompileLambda
          CONNECTION_URL : !Sub "https://${WebsocketsAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter}"

  CompileProxyRouteIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref WebsocketsAPI
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CompileProxyLambda.Arn}/invocations"

  CompileProxyRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    DependsOn:
      - CompileProxyRouteIntegration
    Properties:
      ApiId: !Ref WebsocketsAPI
      RouteKey: compile
      AuthorizationType: NONE
      Target: !Sub "integrations/${CompileProxyRouteIntegration}"

  CompileProxyLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketsAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CompileProxyLambda
      Principal: apigateway.amazonaws.com


  CompileLambda:
    Type: AWS::Serverless::Function
    Properties: 
      Role: !GetAtt LambdaRole.Arn
      Description: >-
        Compiles a sketch to a binary and puts it to S3
      Handler: compile.handler
      CodeUri: lambda/compile/
      Runtime: provided
      Timeout: 60
      MemorySize: 3008
      Layers: 
        - !Ref CompileLayerParameter
      Environment:
        Variables: 
          CONNECTION_URL : !Sub "https://${WebsocketsAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter}"

  
  DisconnectLambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaRole.Arn
      Handler: disconnect.handler
      CodeUri: lambda/disconnect/
      Description: Deregister a connection to the WS API
      Environment:
        Variables: 
          CONNECTIONS_TABLE : !Ref ConnectionsTable
          CONNECTION_URL : !Sub "https://${WebsocketsAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentParameter}"

  DisconnectRouteIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref WebsocketsAPI
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectLambda.Arn}/invocations"

  DisconnectRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    DependsOn:
      - DisconnectRouteIntegration
    Properties:
      ApiId: !Ref WebsocketsAPI
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub "integrations/${DisconnectRouteIntegration}"

  DisconnectLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketsAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectLambda
      Principal: apigateway.amazonaws.com
         

  DefaultLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            callback(null, { statusCode: 200 })
          }
      Description: Handles otherwise unhandled routes

  DefaultRouteIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref WebsocketsAPI
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultLambda.Arn}/invocations"

  DefaultRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    DependsOn:
      - DefaultRouteIntegration
    Properties:
      ApiId: !Ref WebsocketsAPI
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Sub "integrations/${DefaultRouteIntegration}"

  DefaultLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketsAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultLambda
      Principal: apigateway.amazonaws.com


  ConnectionsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions:
        - 
          AttributeName: "ConnectionId"
          AttributeType: "S"
        - 
          AttributeName: "RobotId"
          AttributeType: "S"
        - 
          AttributeName: "PairingCode"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "ConnectionId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      TableName: !Sub "${EnvironmentParameter}-robocoder-ws-connections"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "RobotIdGSI"
          KeySchema: 
            - 
              AttributeName: "RobotId"
              KeyType: "HASH"
          Projection: 
            NonKeyAttributes: 
              - "ConnectionId"
              - "IsRobotConnection"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
        - 
          IndexName: "PairingCodeGSI"
          KeySchema: 
            - 
              AttributeName: "PairingCode"
              KeyType: "HASH"
          Projection: 
            NonKeyAttributes: 
              - "ConnectionId"
              - "RobotId"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
